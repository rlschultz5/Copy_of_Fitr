{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { styles } from \"../helpers/stylesHelper\";\n\nvar InputButton = function InputButton(_ref) {\n  var resetValue = _ref.resetValue,\n      togglePicker = _ref.togglePicker,\n      style = _ref.style,\n      text = _ref.text,\n      textInputStyle = _ref.textInputStyle,\n      touchableStyle = _ref.touchableStyle,\n      isNullable = _ref.isNullable,\n      isCompactHiddenPickerNeeded = _ref.isCompactHiddenPickerNeeded,\n      renderHiddenCompactIOSPicker = _ref.renderHiddenCompactIOSPicker;\n  return React.createElement(View, {\n    style: [styles.input, style]\n  }, isCompactHiddenPickerNeeded ? React.createElement(View, {\n    style: [styles.placeHolderContainerStyle, touchableStyle]\n  }, React.createElement(Text, {\n    style: [styles.placeholderStyle, textInputStyle],\n    numberOfLines: 1,\n    ellipsizeMode: \"tail\"\n  }, text), renderHiddenCompactIOSPicker()) : React.createElement(TouchableWithoutFeedback, {\n    onPress: togglePicker\n  }, React.createElement(View, {\n    style: [styles.placeHolderContainerStyle, touchableStyle]\n  }, React.createElement(Text, {\n    style: [styles.placeholderStyle, textInputStyle],\n    numberOfLines: 1,\n    ellipsizeMode: \"tail\"\n  }, text))), isNullable && React.createElement(TouchableWithoutFeedback, {\n    onPress: resetValue\n  }, React.createElement(View, {\n    style: styles.resetButtonContainerStyle\n  }, React.createElement(Text, {\n    style: [styles.resetButtonStyle]\n  }, \"\\u2715\"))));\n};\n\nexport default InputButton;","map":{"version":3,"sources":["/Users/adiash/Documents/CS506/fitr-506/mobile/node_modules/react-native-woodpicker/dist/components/InputButton.js"],"names":["React","styles","InputButton","resetValue","togglePicker","style","text","textInputStyle","touchableStyle","isNullable","isCompactHiddenPickerNeeded","renderHiddenCompactIOSPicker","createElement","View","input","placeHolderContainerStyle","Text","placeholderStyle","numberOfLines","ellipsizeMode","TouchableWithoutFeedback","onPress","resetButtonContainerStyle","resetButtonStyle"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,MAAT;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAuJ;AAAA,MAApJC,UAAoJ,QAApJA,UAAoJ;AAAA,MAAxIC,YAAwI,QAAxIA,YAAwI;AAAA,MAA1HC,KAA0H,QAA1HA,KAA0H;AAAA,MAAnHC,IAAmH,QAAnHA,IAAmH;AAAA,MAA7GC,cAA6G,QAA7GA,cAA6G;AAAA,MAA7FC,cAA6F,QAA7FA,cAA6F;AAAA,MAA7EC,UAA6E,QAA7EA,UAA6E;AAAA,MAAjEC,2BAAiE,QAAjEA,2BAAiE;AAAA,MAApCC,4BAAoC,QAApCA,4BAAoC;AACvK,SAAQX,KAAK,CAACY,aAAN,CAAoBC,IAApB,EAA0B;AAAER,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACa,KAAR,EAAeT,KAAf;AAAT,GAA1B,EACJK,2BAA2B,GAAIV,KAAK,CAACY,aAAN,CAAoBC,IAApB,EAA0B;AAAER,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACc,yBAAR,EAAmCP,cAAnC;AAAT,GAA1B,EAC3BR,KAAK,CAACY,aAAN,CAAoBI,IAApB,EAA0B;AAAEX,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACgB,gBAAR,EAA0BV,cAA1B,CAAT;AAAoDW,IAAAA,aAAa,EAAE,CAAnE;AAAsEC,IAAAA,aAAa,EAAE;AAArF,GAA1B,EAAyHb,IAAzH,CAD2B,EAE3BK,4BAA4B,EAFD,CAAJ,GAEaX,KAAK,CAACY,aAAN,CAAoBQ,wBAApB,EAA8C;AAAEC,IAAAA,OAAO,EAAEjB;AAAX,GAA9C,EACpCJ,KAAK,CAACY,aAAN,CAAoBC,IAApB,EAA0B;AAAER,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACc,yBAAR,EAAmCP,cAAnC;AAAT,GAA1B,EACIR,KAAK,CAACY,aAAN,CAAoBI,IAApB,EAA0B;AAAEX,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACgB,gBAAR,EAA0BV,cAA1B,CAAT;AAAoDW,IAAAA,aAAa,EAAE,CAAnE;AAAsEC,IAAAA,aAAa,EAAE;AAArF,GAA1B,EAAyHb,IAAzH,CADJ,CADoC,CAHpC,EAMJG,UAAU,IAAKT,KAAK,CAACY,aAAN,CAAoBQ,wBAApB,EAA8C;AAAEC,IAAAA,OAAO,EAAElB;AAAX,GAA9C,EACXH,KAAK,CAACY,aAAN,CAAoBC,IAApB,EAA0B;AAAER,IAAAA,KAAK,EAAEJ,MAAM,CAACqB;AAAhB,GAA1B,EACItB,KAAK,CAACY,aAAN,CAAoBI,IAApB,EAA0B;AAAEX,IAAAA,KAAK,EAAE,CAACJ,MAAM,CAACsB,gBAAR;AAAT,GAA1B,EAAgE,QAAhE,CADJ,CADW,CANX,CAAR;AASH,CAVD;;AAWA,eAAerB,WAAf","sourcesContent":["import React from \"react\";\nimport { View, Text, TouchableWithoutFeedback } from \"react-native\";\nimport { styles } from \"../helpers/stylesHelper\";\nconst InputButton = ({ resetValue, togglePicker, style, text, textInputStyle, touchableStyle, isNullable, isCompactHiddenPickerNeeded, renderHiddenCompactIOSPicker, }) => {\n    return (React.createElement(View, { style: [styles.input, style] },\n        isCompactHiddenPickerNeeded ? (React.createElement(View, { style: [styles.placeHolderContainerStyle, touchableStyle] },\n            React.createElement(Text, { style: [styles.placeholderStyle, textInputStyle], numberOfLines: 1, ellipsizeMode: \"tail\" }, text),\n            renderHiddenCompactIOSPicker())) : (React.createElement(TouchableWithoutFeedback, { onPress: togglePicker },\n            React.createElement(View, { style: [styles.placeHolderContainerStyle, touchableStyle] },\n                React.createElement(Text, { style: [styles.placeholderStyle, textInputStyle], numberOfLines: 1, ellipsizeMode: \"tail\" }, text)))),\n        isNullable && (React.createElement(TouchableWithoutFeedback, { onPress: resetValue },\n            React.createElement(View, { style: styles.resetButtonContainerStyle },\n                React.createElement(Text, { style: [styles.resetButtonStyle] }, \"\\u2715\"))))));\n};\nexport default InputButton;\n"]},"metadata":{},"sourceType":"module"}